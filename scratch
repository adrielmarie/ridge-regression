{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2c46c2f0",
   "metadata": {},
   "source": [
    "# CAP5626 Programming Assignment 2\n",
    "### Adriel Marie Abad\n",
    "Scroll down to find deliverables clearly titled.\n",
    "\n",
    "### Instructions\n",
    "The submission has both the IPYNB file that can be run anywhere that supports Jupyter notebooks, and a PDF file. Run with the training dataset in the same directory.\n",
    "\n",
    "The extra credit work is in a separate IPYNB and PDF due to its length."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbf791da",
   "metadata": {},
   "source": [
    "### Set Up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "42cda848",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from random import seed\n",
    "from random import random\n",
    "import copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5e429ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set random seed\n",
    "seed()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "33880ecc",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.set_printoptions(suppress=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c88e3889",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Income  Limit  Rating  Cards  Age  Education  Gender  Student  Married  \\\n",
      "0     14.891   3606     283      2   34         11       0        0        1   \n",
      "1    106.025   6645     483      3   82         15       1        1        1   \n",
      "2    104.593   7075     514      4   71         11       0        0        0   \n",
      "3    148.924   9504     681      3   36         11       1        0        0   \n",
      "4     55.882   4897     357      2   68         16       0        0        1   \n",
      "..       ...    ...     ...    ...  ...        ...     ...      ...      ...   \n",
      "395   12.096   4100     307      3   32         13       0        0        1   \n",
      "396   13.364   3838     296      5   65         17       0        0        0   \n",
      "397   57.872   4171     321      5   67         12       1        0        1   \n",
      "398   37.728   2525     192      1   44         13       0        0        1   \n",
      "399   18.701   5524     415      5   64          7       1        0        0   \n",
      "\n",
      "     Balance  \n",
      "0        333  \n",
      "1        903  \n",
      "2        580  \n",
      "3        964  \n",
      "4        331  \n",
      "..       ...  \n",
      "395      560  \n",
      "396      480  \n",
      "397      138  \n",
      "398        0  \n",
      "399      966  \n",
      "\n",
      "[400 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# Read csv and convert to numpy\n",
    "df = pd.read_csv('Credit_N400_p9.csv')\n",
    "\n",
    "# Make a copy of df\n",
    "xy = df.copy(deep=True)\n",
    "\n",
    "# Convert categorical variables to numeric\n",
    "xy.replace({\"Gender\": {\"Male\":0, \"Female\":1}}, inplace=True)\n",
    "xy.replace({\"Student\": {\"No\":0, \"Yes\":1}}, inplace=True)\n",
    "xy.replace({\"Married\": {\"No\":0, \"Yes\":1}}, inplace=True)\n",
    "\n",
    "print(xy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f378e97c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the learning rate to 1 x 10^-5\n",
    "lr = 0.00001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f7f11526",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert to numpy array\n",
    "xy = xy.to_numpy()\n",
    "\n",
    "# Split into response vector y and design matrix X\n",
    "y = xy[:,9].reshape(400,1)\n",
    "X = xy[:,0:9]\n",
    "          \n",
    "# Center y\n",
    "y = y - np.mean(y)\n",
    "\n",
    "# Center and standardize X\n",
    "X = (X - np.mean(X, axis=0)) / np.std(X, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d9ca8c41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(400, 9)\n",
      "(400, 1)\n"
     ]
    }
   ],
   "source": [
    "print (X.shape)\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a5b3b9ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "def update_parameters(B,y,X,lb):\n",
    "    '''\n",
    "    B is the randomized coefficients\n",
    "    y is the response vector y, centered\n",
    "    X is the design matrix X, standardized\n",
    "    lb is the tuning parameter\n",
    "    lr is the learning rate\n",
    "    '''\n",
    "    for i in range(100000):\n",
    "        x = lb * B - np.dot(X.T, y - np.dot(X, B))\n",
    "        B = B - 2 * lr * x\n",
    "    return B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f2a141fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Randomly initialize parameter vectors between -1 and 1\n",
    "B = np.random.uniform(low=-1,high=1,size=(9,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb8b3de4",
   "metadata": {},
   "source": [
    "### Get coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0aef5677",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-274.65377664]\n",
      " [ 419.47703894]\n",
      " [ 196.0166512 ]\n",
      " [  23.44092461]\n",
      " [ -10.96516251]\n",
      " [  -3.34641882]\n",
      " [  -5.200985  ]\n",
      " [ 127.78254996]\n",
      " [  -3.59623627]]\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^-2\n",
    "\n",
    "# Randomly initialize parameter vectors between -1 and 1\n",
    "B0 = copy.deepcopy(B)\n",
    "B0 = update_parameters(B0,y,X,0.01)\n",
    "    \n",
    "print(B0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b5a356c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-274.34550895]\n",
      " [ 412.41444877]\n",
      " [ 202.7801551 ]\n",
      " [  23.15493787]\n",
      " [ -10.99602131]\n",
      " [  -3.30586705]\n",
      " [  -5.19137093]\n",
      " [ 127.70320083]\n",
      " [  -3.64811639]]\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^-1\n",
    "\n",
    "# Randomly initialize parameter vectors between -1 and 1\n",
    "B1 = copy.deepcopy(B)\n",
    "B1 = update_parameters(B1,y,X,0.1)\n",
    "\n",
    "print(B1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "173633d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-271.23474905]\n",
      " [ 367.96632983]\n",
      " [ 244.17064444]\n",
      " [  21.42467819]\n",
      " [ -11.27246691]\n",
      " [  -3.03714232]\n",
      " [  -5.09422067]\n",
      " [ 127.06890144]\n",
      " [  -3.98624841]]\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^0\n",
    "\n",
    "# Randomly initialize parameter vectors between -1 and 1\n",
    "B2 = copy.deepcopy(B)\n",
    "B2 = update_parameters(B2,y,X,1)\n",
    "\n",
    "print(B2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6134c67c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-242.10833392]\n",
      " [ 302.25028739]\n",
      " [ 280.52528948]\n",
      " [  20.27479689]\n",
      " [ -13.32129241]\n",
      " [  -2.36122776]\n",
      " [  -4.18577233]\n",
      " [ 123.16827701]\n",
      " [  -4.71110792]]\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^1\n",
    "\n",
    "# Randomly initialize parameter vectors between -1 and 1\n",
    "B3 = copy.deepcopy(B)\n",
    "B3 = update_parameters(B3,y,X,10)\n",
    "\n",
    "print(B3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "370314e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-94.63942667]\n",
      " [211.36544753]\n",
      " [209.54614847]\n",
      " [ 22.36496179]\n",
      " [-19.17568799]\n",
      " [ -0.4618808 ]\n",
      " [  0.21941357]\n",
      " [ 97.66702868]\n",
      " [ -5.73202868]]\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^2\n",
    "\n",
    "# Randomly initialize parameter vectors between -1 and 1\n",
    "B4 = copy.deepcopy(B)\n",
    "B4 = update_parameters(B4,y,X,100)\n",
    "\n",
    "print(B4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1ef0186c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[22.93310136]\n",
      " [84.07770503]\n",
      " [84.21703606]\n",
      " [10.26564982]\n",
      " [-5.6931724 ]\n",
      " [-0.09971875]\n",
      " [ 1.99329983]\n",
      " [34.00237516]\n",
      " [-1.95907508]]\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^3\n",
    "\n",
    "# Randomly initialize parameter vectors between -1 and 1\n",
    "B5 = copy.deepcopy(B)\n",
    "B5 = update_parameters(B5,y,X,1000)\n",
    "\n",
    "print(B5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1349c2d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 7.30675542]\n",
      " [14.44169723]\n",
      " [14.4740176 ]\n",
      " [ 1.50156964]\n",
      " [-0.12798262]\n",
      " [-0.11412644]\n",
      " [ 0.36379165]\n",
      " [ 4.57395306]\n",
      " [-0.13420054]]\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^4\n",
    "\n",
    "# Randomly initialize parameter vectors between -1 and 1\n",
    "B6 = copy.deepcopy(B)\n",
    "B6 = update_parameters(B6,y,X,10000)\n",
    "\n",
    "print(B6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfdcc97b",
   "metadata": {},
   "source": [
    "## Deliverable 1 - Effect of tuning parameter on inferred regression coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c3df4556",
   "metadata": {},
   "outputs": [],
   "source": [
    "def y_points(index):\n",
    "    return [B0[index], B1[index], B2[index], B3[index], B4[index], B5[index], B6[index]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cbdbe4b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x19e84740a10>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot graphs to illustrate effect of tuning parameters\n",
    "x_points = [0.01, 0.1, 1, 10, 100, 1000, 10000] # Get x points\n",
    "\n",
    "y_income = y_points(0)\n",
    "y_limit = y_points(1)\n",
    "y_rating = y_points(2)\n",
    "y_cards = y_points(3)\n",
    "y_age = y_points(4)\n",
    "y_education = y_points(5)\n",
    "y_gender = y_points(6)\n",
    "y_student = y_points(7)\n",
    "y_married = y_points(8)\n",
    "\n",
    "y_zero = np.zeros(7)\n",
    "\n",
    "plt.plot(x_points, y_income, label=\"Income\")\n",
    "plt.plot(x_points, y_limit, label=\"Limit\")\n",
    "plt.plot(x_points, y_rating, label=\"Rating\")\n",
    "plt.plot(x_points, y_cards, label=\"Cards\")\n",
    "plt.plot(x_points, y_age, label=\"Age\")\n",
    "plt.plot(x_points, y_education, label=\"Education\")\n",
    "plt.plot(x_points, y_gender, label=\"Gender\")\n",
    "plt.plot(x_points, y_student, label=\"Student\")\n",
    "plt.plot(x_points, y_married, label=\"Married\")\n",
    "\n",
    "plt.plot(x_points, y_zero, linestyle=\"dashed\")\n",
    "\n",
    "plt.title(\"Effects of Tuning Parameter\")\n",
    "plt.xlabel(\"Tuning parameter\")\n",
    "plt.ylabel(\"Inferred Regression Coefficients\")\n",
    "plt.ylim(-300,450)\n",
    "plt.xlim(0.01,10000)\n",
    "plt.xscale('log')\n",
    "plt.legend(loc=\"lower left\", fontsize=\"small\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74b40e23",
   "metadata": {},
   "source": [
    "### Set up for cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3af0da41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a copy of df\n",
    "xy = df.copy(deep=True)\n",
    "\n",
    "# Convert categorical variables to numeric\n",
    "xy.replace({\"Gender\": {\"Male\":0, \"Female\":1}}, inplace=True)\n",
    "xy.replace({\"Student\": {\"No\":0, \"Yes\":1}}, inplace=True)\n",
    "xy.replace({\"Married\": {\"No\":0, \"Yes\":1}}, inplace=True)\n",
    "\n",
    "# Convert to numpy array\n",
    "xy = xy.to_numpy()\n",
    "\n",
    "# Shuffle dataset, get X and y\n",
    "np.random.shuffle(xy)\n",
    "y = xy[:,9].reshape(400,1)\n",
    "X = xy[:,0:9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ffeab288",
   "metadata": {},
   "outputs": [],
   "source": [
    "def five_fold_cv(X,y,Bt,lb):\n",
    "    p = 0 # Lower bound of fold\n",
    "    fold_size = 80\n",
    "    mse = [] # List of MSE's for folds\n",
    "    \n",
    "    # k-fold cross-validation\n",
    "    for i in range(5):\n",
    "        q = p + fold_size # Upper bound of fold\n",
    "\n",
    "        # Validation set = 80\n",
    "        X_val = X[p:q]\n",
    "        y_val = y[p:q]\n",
    "\n",
    "        # Training set = 320\n",
    "        X_train = X[np.r_[q:400,0:p]]\n",
    "        y_train = y[np.r_[q:400,0:p]]\n",
    "\n",
    "        # Center y_train and y_val\n",
    "        y_val = y_val - np.mean(y_train)\n",
    "        y_train = y_train - np.mean(y_train)\n",
    "\n",
    "        # Center and standardize X_train and X_val\n",
    "        X_val = (X_val - np.mean(X_train, axis=0)) / np.std(X_train, axis=0)\n",
    "        X_train = (X_train - np.mean(X_train, axis=0)) / np.std(X_train, axis=0)\n",
    "        \n",
    "        # Initialize fold B to same random coefficients\n",
    "        Bf = copy.deepcopy(Bt)\n",
    "\n",
    "        # Train model\n",
    "        Bf = update_parameters(Bf,y_train,X_train,lb)\n",
    "\n",
    "        # Make predictions on validation set and calculate MSE\n",
    "        y_pred = np.dot(X_val,Bf)\n",
    "        fold_mse = np.mean((y_val - y_pred)**2)\n",
    "        mse.append(fold_mse)\n",
    "\n",
    "        print(f\"Fold {i+1} MSE: {fold_mse}\")\n",
    "\n",
    "        # Next fold\n",
    "        p += fold_size\n",
    "        \n",
    "    # Calculate average MSE\n",
    "    avg_mse = np.sum(mse) / len(mse)\n",
    "    print(\"\\nAverage MSE:\", avg_mse)\n",
    "\n",
    "    return avg_mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "877211e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1 MSE: 14725.341660536476\n",
      "Fold 2 MSE: 7921.856145202262\n",
      "Fold 3 MSE: 8389.533094048771\n",
      "Fold 4 MSE: 7979.461166613303\n",
      "Fold 5 MSE: 10672.673823940175\n",
      "\n",
      "Average MSE: 9937.773178068197\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^-2\n",
    "mse0 = five_fold_cv(X,y,B,0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "617fdc05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1 MSE: 14689.493846362166\n",
      "Fold 2 MSE: 7923.707070491774\n",
      "Fold 3 MSE: 8392.059509775767\n",
      "Fold 4 MSE: 7989.967339086918\n",
      "Fold 5 MSE: 10691.227224654242\n",
      "\n",
      "Average MSE: 9937.290998074173\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^-1\n",
    "mse1 = five_fold_cv(X,y,B,0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3721186e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1 MSE: 14423.452256127415\n",
      "Fold 2 MSE: 7961.848011999333\n",
      "Fold 3 MSE: 8418.538524504256\n",
      "Fold 4 MSE: 8087.758475462772\n",
      "Fold 5 MSE: 10855.390341926648\n",
      "\n",
      "Average MSE: 9949.397522004085\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^0\n",
    "mse2 = five_fold_cv(X,y,B,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "75773652",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1 MSE: 13491.926035486811\n",
      "Fold 2 MSE: 8818.161805891175\n",
      "Fold 3 MSE: 9025.941319139441\n",
      "Fold 4 MSE: 9361.639288648736\n",
      "Fold 5 MSE: 12442.450475353817\n",
      "\n",
      "Average MSE: 10628.023784903995\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^1\n",
    "mse3 = five_fold_cv(X,y,B,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3bd4ff42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1 MSE: 28899.8103480032\n",
      "Fold 2 MSE: 25912.913684668358\n",
      "Fold 3 MSE: 26483.317190140988\n",
      "Fold 4 MSE: 32036.55095919635\n",
      "Fold 5 MSE: 34806.92218366376\n",
      "\n",
      "Average MSE: 29627.90287313453\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^2\n",
    "mse4 = five_fold_cv(X,y,B,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "74102a99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1 MSE: 118414.2765663052\n",
      "Fold 2 MSE: 90304.04360008733\n",
      "Fold 3 MSE: 94637.48123761397\n",
      "Fold 4 MSE: 107932.55433693784\n",
      "Fold 5 MSE: 118431.94790916223\n",
      "\n",
      "Average MSE: 105944.06073002133\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^3\n",
    "mse5 = five_fold_cv(X,y,B,1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "bd68cc5f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1 MSE: 213349.95403776792\n",
      "Fold 2 MSE: 158015.00348481536\n",
      "Fold 3 MSE: 167438.89237389056\n",
      "Fold 4 MSE: 191223.61339314512\n",
      "Fold 5 MSE: 218797.96632789314\n",
      "\n",
      "Average MSE: 189765.0859235024\n"
     ]
    }
   ],
   "source": [
    "# Tuning parameter 10^4\n",
    "mse6 = five_fold_cv(X,y,B,10000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af9496df",
   "metadata": {},
   "source": [
    "# Deliverable 2: Effects of Tuning Parameter on CV Error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3b43d11b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot graphs to illustrate effect of tuning parameters\n",
    "x_points = [0.01, 0.1, 1, 10, 100, 1000, 10000] # Get x points\n",
    "y_points = [mse0,mse1,mse2,mse3,mse4,mse5,mse6]\n",
    "\n",
    "\n",
    "y_zero = np.zeros(7)\n",
    "\n",
    "plt.plot(x_points, y_points, label=\"CV(5) Error\")\n",
    "\n",
    "plt.plot(x_points, y_zero, linestyle=\"dashed\")\n",
    "\n",
    "plt.title(\"Effects of Tuning Parameter on CV(5) Error\")\n",
    "plt.xlabel(\"Tuning parameter\")\n",
    "plt.ylabel(\"CV(5) MSE\")\n",
    "plt.xlim(0.01,10000)\n",
    "plt.xscale('log')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76021328",
   "metadata": {},
   "source": [
    "# Deliverable 3 and 4: Optimal Tuning Parameter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7fa944b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal tuning parameter: 10^-1\n",
      "Estimated model parameters:\n",
      "[[-274.34550895]\n",
      " [ 412.41444877]\n",
      " [ 202.7801551 ]\n",
      " [  23.15493787]\n",
      " [ -10.99602131]\n",
      " [  -3.30586705]\n",
      " [  -5.19137093]\n",
      " [ 127.70320083]\n",
      " [  -3.64811639]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Optimal tuning parameter: 10^-1\")\n",
    "\n",
    "# Get X and y\n",
    "y = xy[:,9].reshape(400,1)\n",
    "X = xy[:,0:9]\n",
    "\n",
    "# Center y\n",
    "y = y - np.mean(y)\n",
    "\n",
    "# Center and standardize X\n",
    "X = (X - np.mean(X,axis=0)) / np.std(X,axis=0)\n",
    "\n",
    "# Train model\n",
    "Bopt = copy.deepcopy(B)\n",
    "Bopt = update_parameters(Bopt,y,X,0.1)\n",
    "    \n",
    "print(\"Estimated model parameters:\")\n",
    "print(Bopt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb27dbf8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
